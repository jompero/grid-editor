{"version":3,"sources":["9445.png","components/Grid.tsx","components/Tile.tsx","components/Palette.tsx","components/TileMap.tsx","App.tsx","index.tsx"],"names":["module","exports","Grid","rows","columns","tileHeight","tileWidth","scale","children","gridContainerStyle","display","gridTemplateColumns","gridTemplateRows","childrenStyle","transformOrigin","transform","style","React","map","child","Tile","image","posX","posY","backgroundImage","backgroundPosition","width","height","Palette","setOpen","open","onClick","Drawer","anchor","onClose","TileMap","App","useState","tile","setTile","Array","fill","tileMap","setTileMap","paint","index","newMap","oldT","i","className","AppBar","position","Toolbar","Typography","variant","flexGrow","mapping","t","key","onMouseDown","onMouseEnter","event","nativeEvent","which","coordinate","x","y","ReactDOM","render","document","getElementById"],"mappings":"4viBAAAA,EAAOC,QAAU,IAA0B,kC,sICmC5BC,MAxBf,YAAiF,IAAjEC,EAAgE,EAAhEA,KAAMC,EAA0D,EAA1DA,QAASC,EAAiD,EAAjDA,WAAYC,EAAqC,EAArCA,UAAWC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,SACnDC,EAAqB,CACvBC,QAAS,cACTC,oBAAoB,UAAD,OAAYP,EAAZ,aAAwBE,EAAYC,EAApC,mBACnBK,iBAAiB,UAAD,OAAYT,EAAZ,aAAqBE,EAAaE,EAAlC,oBAGdM,EAAgB,CAClBC,gBAAiB,WACjBC,UAAU,SAAD,OAAWR,EAAX,MAQb,OACI,uBAAKS,MAAOP,GALPD,EACES,WAAeC,IAAIV,GAAU,SAACW,GAAD,OAAW,uBAAKH,MAAOH,GAAgBM,MADrD,OCFfC,MAdf,YAA6C,IAA7BC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAErBP,EAAQ,CACZQ,gBAAgB,OAAD,OAASH,EAAT,KACfI,mBAAmB,IAAD,OAAMH,EAAN,eAAiBC,EAAjB,MAClBG,MAAO,OACPC,OAAQ,QAGV,OACE,uBAAKX,MAAOA,K,QCIDY,MAZf,YAAsD,IAAnCC,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,KAAMtB,EAAmB,EAAnBA,SAC9B,OACI,uBAAKuB,QAAS,kBAAMF,GAAQ,KACxB,gBAACG,EAAA,EAAD,CAAQC,OAAO,QAAQH,KAAMA,EAAMI,QAAS,kBAAML,GAAQ,KACtD,gBAAC,EAAD,CAAMzB,QAAS,GAAID,KAAM,GAAIE,WAAY,GAAIC,UAAW,GAAIC,MAAO,GAC9DC,MCIN2B,MARf,YAA6E,IAA1DT,EAAyD,EAAzDA,MAAOC,EAAkD,EAAlDA,OAAQtB,EAA0C,EAA1CA,WAAYC,EAA8B,EAA9BA,UAAWE,EAAmB,EAAnBA,SACrD,OACI,gBAAC,EAAD,CAAMJ,QAASsB,EAAOvB,KAAMwB,EAAQtB,WAAYA,GAA0B,GAAIC,UAAWA,GAAwB,GAAIC,MAAO,GACvHC,I,yBC4DE4B,MAhEf,WAAgB,IAAD,EAEWC,oBAAS,GAFpB,mBAENP,EAFM,KAEAD,EAFA,OAGWQ,mBAAS,GAHpB,mBAGNC,EAHM,KAGAC,EAHA,OAIiBF,mBAAS,IAAIG,MAAM,KAAOC,KAAK,IAJhD,mBAINC,EAJM,KAIGC,EAJH,KAMb,SAASC,EAAMC,GACb,IAAMC,EAASJ,EAAQxB,KAAI,SAAC6B,EAAMC,GAAP,OAAaA,IAAMH,EAAQE,EAAOT,KAC7DK,EAAWG,GA4Bb,OACE,uBAAKG,UAAU,OAEb,gBAACC,EAAA,EAAD,CAAQC,SAAS,UACf,gBAACC,EAAA,EAAD,KACE,gBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKtC,MATd,CACjBuC,SAAU,IAQJ,eAGA,uBAAKxB,QAAS,kBAAMF,GAAQ,KAC1B,gBAAC,EAAD,CAAMzB,QAAS,EAAGD,KAAM,EAAGE,WAAY,GAAIC,UAAW,GAAIC,MAAO,GAC/D,gBAAC,EAAD,CAAMc,MAAOA,IAAOC,KAAMkC,EAAQlB,GAAR,EAAoBf,KAAMiC,EAAQlB,GAAR,QAM5D,gBAAC,EAAD,CAASZ,MAAO,GAAIC,OAAQ,IApCvBe,EAAQxB,KAAI,SAACuC,EAAGT,GACrB,OACE,uBACEU,IAAKV,EACLjB,QAAS,kBAAMa,EAAMI,IACrBW,YAAa,kBAAMf,EAAMI,IACzBY,aAAc,SAACC,GACe,IAA5BA,EAAMC,YAAYC,OAAenB,EAAMI,KAGzC,gBAAC,EAAD,CAAM3B,MAAOA,IAAOC,KAAMkC,EAAQC,GAAR,EAAiBlC,KAAMiC,EAAQC,GAAR,SA8BrD,gBAAC,EAAD,CAAS5B,QAASA,EAASC,KAAMA,GA5C5B0B,EAAQtC,KAAI,SAAC8C,EAAYnB,GAAb,OAAuB,uBAAKa,IAAKb,EAAOd,QAAS,kBAAMQ,EAAQM,KAAQ,gBAAC,EAAD,CAAMxB,MAAOA,IAAOC,KAAM0C,EAAWC,EAAG1C,KAAMyC,EAAWE,WClBvJC,IAASC,OAAO,gBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.b32fcfbf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/9445.99405a1b.png\";","import * as React from 'react';\r\n\r\nexport interface Props {\r\n    rows: number,\r\n    columns: number,\r\n    tileHeight: number,\r\n    tileWidth: number,\r\n    scale: number,\r\n    children: React.ReactNode\r\n}\r\n\r\nfunction Grid({ rows, columns, tileHeight, tileWidth, scale, children }: Props) {\r\n    const gridContainerStyle = {\r\n        display: 'inline-grid',\r\n        gridTemplateColumns: `repeat(${columns}, ${tileWidth * scale}px [col-start])`,\r\n        gridTemplateRows: `repeat(${rows}, ${tileHeight * scale}px [row-start])`,\r\n    }\r\n\r\n    const childrenStyle = {\r\n        transformOrigin: 'top left',\r\n        transform: `scale(${scale})`,\r\n    }\r\n\r\n    function styledChildren(): any {\r\n        if (!children) return null;\r\n        return React.Children.map(children, (child) => <div style={childrenStyle}>{child}</div>);\r\n    }\r\n    \r\n    return (\r\n        <div style={gridContainerStyle}>\r\n            {styledChildren()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Grid;","import * as React from 'react';\r\n\r\nexport interface Props {\r\n  image: string;\r\n  posX: number;\r\n  posY: number;\r\n}\r\n\r\nfunction Tile({ image, posX, posY }: Props) {\r\n\r\n  const style = {\r\n    backgroundImage: `url(${image})`,\r\n    backgroundPosition: `-${posX}px -${posY}px`,\r\n    width: '16px',\r\n    height: '16px'\r\n  }\r\n\r\n  return (\r\n    <div style={style} />\r\n  );\r\n}\r\n\r\nexport default Tile;\r\n","import * as React from 'react';\r\nimport { Drawer } from '@material-ui/core';\r\nimport Grid from './Grid';\r\n\r\nexport interface Props {\r\n    setOpen: Function,\r\n    open: boolean,\r\n    children: React.ReactNode\r\n}\r\n\r\nfunction Palette({ setOpen, open, children }: Props) {\r\n    return (\r\n        <div onClick={() => setOpen(false)}>\r\n            <Drawer anchor=\"right\" open={open} onClose={() => setOpen(false)} >\r\n                <Grid columns={10} rows={50} tileHeight={17} tileWidth={17} scale={2} >\r\n                    {children}\r\n                </Grid>\r\n            </Drawer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Palette;\r\n","import * as React from 'react';\r\nimport Grid from './Grid';\r\n\r\nexport interface Props {\r\n    width: number,\r\n    height: number,\r\n    tileHeight?: number,\r\n    tileWidth?: number,\r\n    children: React.ReactNode\r\n}\r\n\r\nfunction TileMap({ width, height, tileHeight, tileWidth, children }: Props) {\r\n    return (\r\n        <Grid columns={width} rows={height} tileHeight={tileHeight ? tileHeight : 16} tileWidth={tileWidth ? tileWidth : 16} scale={2} >\r\n            {children}\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default TileMap;\r\n","import * as React from 'react';\nimport { AppBar, Toolbar, Typography } from '@material-ui/core';\nimport Grid from './components/Grid'\nimport Tile from './components/Tile';\nimport Palette from './components/Palette';\nimport TileMap from './components/TileMap';\nimport image from './9445.png';\nimport mapping from './9445.json';\nimport { useState } from 'react';\n\nfunction App() {\n\n  const [open, setOpen] = useState(false);\n  const [tile, setTile] = useState(0);\n  const [tileMap, setTileMap] = useState(new Array(40*20).fill(0));\n\n  function paint(index: number): void {\n    const newMap = tileMap.map((oldT, i) => i !== index ? oldT : tile);\n    setTileMap(newMap);\n  }\n\n  function palette(): any {\n    return mapping.map((coordinate, index) => <div key={index} onClick={() => setTile(index)}><Tile image={image} posX={coordinate.x} posY={coordinate.y} /></div>);\n  }\n\n  function parseTileMap(): any {\n    return tileMap.map((t, i) => {\n      return (\n        <div \n          key={i} \n          onClick={() => paint(i)}\n          onMouseDown={() => paint(i)}\n          onMouseEnter={(event) =>  { \n            event.nativeEvent.which === 1 && paint(i);\n          }} \n        >\n          <Tile image={image} posX={mapping[t]['x']} posY={mapping[t]['y']} />\n        </div>\n      )\n    });\n  }\n\n  const titleStyle = {\n    flexGrow: 1\n  }\n\n  return (\n    <div className=\"App\">\n      \n      <AppBar position='static'>\n        <Toolbar>\n          <Typography variant=\"h6\" style={titleStyle}>\n            Grid Editor\n          </Typography>\n          <div onClick={() => setOpen(true)}>\n            <Grid columns={1} rows={1} tileHeight={16} tileWidth={16} scale={3} >\n              <Tile image={image} posX={mapping[tile]['x']} posY={mapping[tile]['y']} />\n            </Grid>\n          </div>\n        </Toolbar>\n      </AppBar>\n\n      <TileMap width={40} height={20}>\n        {parseTileMap()}\n      </TileMap>\n\n      <Palette setOpen={setOpen} open={open}>\n        {palette()}\n      </Palette>\n\n    </div>\n  );\n}\n\nexport default App;\n\nexport interface Coordinate {\n  x: number,\n  y: number,\n  height: number,\n  width: number\n}","import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}