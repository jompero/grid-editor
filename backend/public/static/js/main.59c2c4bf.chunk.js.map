{"version":3,"sources":["9445.png","components/Grid.tsx","components/Tile.tsx","App.tsx","index.tsx"],"names":["module","exports","Grid","rows","columns","tileHeight","tileWidth","scale","children","gridContainerStyle","display","gridTemplateColumns","gridTemplateRows","childrenStyle","transformOrigin","transform","style","React","map","child","Tile","image","posX","posY","backgroundImage","backgroundPosition","width","height","App","useState","open","setOpen","tile","setTile","tileMap","setTileMap","className","AppBar","position","Toolbar","Typography","variant","Button","onClick","t","i","oldT","index","mapping","Drawer","anchor","onClose","coordinate","ReactDOM","render","document","getElementById"],"mappings":"2SAAAA,EAAOC,QAAU,IAA0B,kC,sJCmC5BC,MAxBf,YAAiF,IAAjEC,EAAgE,EAAhEA,KAAMC,EAA0D,EAA1DA,QAASC,EAAiD,EAAjDA,WAAYC,EAAqC,EAArCA,UAAWC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,SACnDC,EAAqB,CACvBC,QAAS,cACTC,oBAAoB,UAAD,OAAYP,EAAZ,aAAwBE,EAAYC,EAApC,mBACnBK,iBAAiB,UAAD,OAAYT,EAAZ,aAAqBE,EAAaE,EAAlC,oBAGdM,EAAgB,CAClBC,gBAAiB,WACjBC,UAAU,SAAD,OAAWR,EAAX,MAQb,OACI,uBAAKS,MAAOP,GALPD,EACES,WAAeC,IAAIV,GAAU,SAACW,GAAD,OAAW,uBAAKH,MAAOH,GAAgBM,MADrD,OCFfC,MAdf,YAA6C,IAA7BC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,KAErBP,EAAQ,CACZQ,gBAAgB,OAAD,OAASH,EAAT,KACfI,mBAAmB,IAAD,OAAMH,EAAN,eAAiBC,EAAjB,MAClBG,MAAO,OACPC,OAAQ,QAGV,OACE,uBAAKX,MAAOA,K,yBCoCDY,MA9Cf,WAAgB,IAAD,EAEWC,oBAAS,GAFpB,mBAENC,EAFM,KAEAC,EAFA,OAGWF,mBAAS,GAHpB,mBAGNG,EAHM,KAGAC,EAHA,OAIiBJ,mBAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,IAJhG,mBAINK,EAJM,KAIGC,EAJH,KAoBb,OACE,uBAAKC,UAAU,OACb,gBAACC,EAAA,EAAD,CAAQC,SAAS,UACf,gBAACC,EAAA,EAAD,KACE,gBAACC,EAAA,EAAD,CAAYC,QAAQ,MAApB,eAGA,gBAACC,EAAA,EAAD,CAAQC,QAAS,kBAAMZ,GAAQ,KAA/B,gBAJF,kBAKkBC,IAIpB,gBAAC,EAAD,CAAM5B,QAAS,EAAGD,KAAM,EAAGE,WAAY,GAAIC,UAAW,GAAIC,MAAO,GArB5D2B,EAAQhB,KAAI,SAAC0B,EAAGC,GACrB,OACE,uBAAKF,QAAS,kBAAMR,EAAWD,EAAQhB,KAAI,SAAC4B,EAAMC,GAAP,OAAiBA,IAAUF,EAAIC,EAAOd,QAC/E,gBAAC,EAAD,CAAMX,MAAOA,IAAOC,KAAM0B,EAAQJ,GAAR,EAAiBrB,KAAMyB,EAAQJ,GAAR,SAsBrD,gBAACK,EAAA,EAAD,CAAQC,OAAO,QAAQpB,KAAMA,EAAMqB,QAAS,kBAAMpB,GAAQ,KACxD,gBAAC,EAAD,CAAM3B,QAAS,EAAGD,KAAM,EAAGE,WAAY,GAAIC,UAAW,GAAIC,MAAO,GA9B9DyC,EAAQ9B,KAAI,SAACkC,EAAYL,GAAb,OAAuB,uBAAKJ,QAAS,kBAAMV,EAAQc,KAAQ,gBAAC,EAAD,CAAM1B,MAAOA,IAAOC,KAAM8B,EAAU,EAAO7B,KAAM6B,EAAU,YCX7IC,IAASC,OAAO,gBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.59c2c4bf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/9445.99405a1b.png\";","import * as React from 'react';\r\n\r\nexport interface Props {\r\n    rows: number,\r\n    columns: number,\r\n    tileHeight: number,\r\n    tileWidth: number,\r\n    scale: number,\r\n    children: React.ReactNode\r\n}\r\n\r\nfunction Grid({ rows, columns, tileHeight, tileWidth, scale, children }: Props) {\r\n    const gridContainerStyle = {\r\n        display: 'inline-grid',\r\n        gridTemplateColumns: `repeat(${columns}, ${tileWidth * scale}px [col-start])`,\r\n        gridTemplateRows: `repeat(${rows}, ${tileHeight * scale}px [row-start])`,\r\n    }\r\n\r\n    const childrenStyle = {\r\n        transformOrigin: 'top left',\r\n        transform: `scale(${scale})`,\r\n    }\r\n\r\n    function styledChildren(): any {\r\n        if (!children) return null;\r\n        return React.Children.map(children, (child) => <div style={childrenStyle}>{child}</div>);\r\n    }\r\n    \r\n    return (\r\n        <div style={gridContainerStyle}>\r\n            {styledChildren()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Grid;","import * as React from 'react';\r\n\r\nexport interface Props {\r\n  image: string;\r\n  posX: number;\r\n  posY: number;\r\n}\r\n\r\nfunction Tile({ image, posX, posY }: Props) {\r\n\r\n  const style = {\r\n    backgroundImage: `url(${image})`,\r\n    backgroundPosition: `-${posX}px -${posY}px`,\r\n    width: '16px',\r\n    height: '16px'\r\n  }\r\n\r\n  return (\r\n    <div style={style} />\r\n  );\r\n}\r\n\r\nexport default Tile;\r\n","import * as React from 'react';\nimport { AppBar, Toolbar, Typography, Button, Drawer } from '@material-ui/core';\nimport Grid from './components/Grid'\nimport Tile from './components/Tile';\nimport image from './9445.png';\nimport mapping from './9445.json';\nimport { useState } from 'react';\n\nfunction App() {\n\n  const [open, setOpen] = useState(false);\n  const [tile, setTile] = useState(0);\n  const [tileMap, setTileMap] = useState([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n\n  function palette(): any {\n    return mapping.map((coordinate, index) => <div onClick={() => setTile(index)}><Tile image={image} posX={coordinate['x']} posY={coordinate['y']} /></div>);\n  }\n\n  function drawTileMap(): any {\n    return tileMap.map((t, i) => {\n      return (\n        <div onClick={() => setTileMap(tileMap.map((oldT, index) => index !== i ? oldT : tile))}>\n          <Tile image={image} posX={mapping[t]['x']} posY={mapping[t]['y']} />\n        </div>\n      )\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <AppBar position='static'>\n        <Toolbar>\n          <Typography variant=\"h6\">\n            Grid Editor\n          </Typography>\n          <Button onClick={() => setOpen(true)}>Open Palette</Button>\n          Selected tile: {tile}\n        </Toolbar>\n      </AppBar>\n\n      <Grid columns={4} rows={6} tileHeight={16} tileWidth={16} scale={5} >\n        {drawTileMap()}\n      </Grid>\n\n      <Drawer anchor=\"right\" open={open} onClose={() => setOpen(false)}>\n        <Grid columns={5} rows={3} tileHeight={17} tileWidth={17} scale={3} >\n            {palette()}\n          </Grid>\n      </Drawer>\n\n    </div>\n  );\n}\n\nexport default App;\n\nexport interface Coordinate {\n  x: number,\n  y: number,\n  height: number,\n  width: number\n}","import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}