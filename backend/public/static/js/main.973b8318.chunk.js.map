{"version":3,"sources":["9445.png","components/Grid.tsx","components/Tile.tsx","components/Palette.tsx","components/TileMap.tsx","App.tsx","index.tsx"],"names":["module","exports","Grid","rows","columns","tileHeight","tileWidth","scale","children","gridContainerStyle","display","gridTemplateColumns","gridTemplateRows","childrenStyle","transformOrigin","transform","style","React","map","child","Tile","image","posX","posY","backgroundImage","backgroundPosition","width","height","useStyles","makeStyles","theme","createStyles","toolbarMargin","mixins","toolbar","Palette","setOpen","open","classes","onClick","Drawer","variant","anchor","onClose","className","TileMap","root","appBar","zIndex","drawer","flexShrink","title","flexGrow","App","useState","tile","setTile","Array","fill","tileMap","setTileMap","paint","index","newMap","oldT","i","AppBar","position","Toolbar","Typography","mapping","t","key","onMouseDown","onMouseEnter","event","nativeEvent","which","coordinate","x","y","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.973b8318.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/9445.99405a1b.png\";","import * as React from 'react';\r\n\r\nexport interface Props {\r\n    rows: number,\r\n    columns: number,\r\n    tileHeight: number,\r\n    tileWidth: number,\r\n    scale: number,\r\n    children: React.ReactNode\r\n}\r\n\r\nfunction Grid({ rows, columns, tileHeight, tileWidth, scale, children }: Props) {\r\n    const gridContainerStyle = {\r\n        display: 'inline-grid',\r\n        gridTemplateColumns: `repeat(${columns}, ${tileWidth * scale}px [col-start])`,\r\n        gridTemplateRows: `repeat(${rows}, ${tileHeight * scale}px [row-start])`,\r\n    }\r\n\r\n    const childrenStyle = {\r\n        transformOrigin: 'top left',\r\n        transform: `scale(${scale})`,\r\n    }\r\n\r\n    function styledChildren(): any {\r\n        if (!children) return null;\r\n        return React.Children.map(children, (child) => <div style={childrenStyle}>{child}</div>);\r\n    }\r\n    \r\n    return (\r\n        <div style={gridContainerStyle}>\r\n            {styledChildren()}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Grid;","import * as React from 'react';\r\n\r\nexport interface Props {\r\n  image: string;\r\n  posX: number;\r\n  posY: number;\r\n}\r\n\r\nfunction Tile({ image, posX, posY }: Props) {\r\n\r\n  const style = {\r\n    backgroundImage: `url(${image})`,\r\n    backgroundPosition: `-${posX}px -${posY}px`,\r\n    width: '16px',\r\n    height: '16px'\r\n  }\r\n\r\n  return (\r\n    <div style={style} />\r\n  );\r\n}\r\n\r\nexport default Tile;\r\n","import * as React from 'react';\r\nimport { Drawer } from '@material-ui/core';\r\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles'\r\nimport Grid from './Grid';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        toolbarMargin: theme.mixins.toolbar,\r\n    })\r\n);\r\n\r\nexport interface Props {\r\n    setOpen: Function,\r\n    open: boolean,\r\n    children: React.ReactNode\r\n}\r\n\r\nfunction Palette({ setOpen, open, children }: Props) {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div onClick={() => setOpen(false)}>\r\n            <Drawer variant='permanent' anchor=\"right\" open={open} onClose={() => setOpen(false)} >\r\n                <div className={classes.toolbarMargin} />\r\n                <Grid columns={10} rows={50} tileHeight={17} tileWidth={17} scale={2} >\r\n                    {children}\r\n                </Grid>\r\n            </Drawer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Palette;\r\n","import * as React from 'react';\r\nimport Grid from './Grid';\r\n\r\nexport interface Props {\r\n    width: number,\r\n    height: number,\r\n    tileHeight?: number,\r\n    tileWidth?: number,\r\n    children: React.ReactNode\r\n}\r\n\r\nfunction TileMap({ width, height, tileHeight, tileWidth, children }: Props) {\r\n    return (\r\n        <Grid columns={width} rows={height} tileHeight={tileHeight ? tileHeight : 16} tileWidth={tileWidth ? tileWidth : 16} scale={2} >\r\n            {children}\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default TileMap;\r\n","import * as React from 'react';\nimport { AppBar, Toolbar, Typography } from '@material-ui/core';\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\nimport Grid from './components/Grid'\nimport Tile from './components/Tile';\nimport Palette from './components/Palette';\nimport TileMap from './components/TileMap';\nimport image from './9445.png';\nimport mapping from './9445.json';\nimport { useState } from 'react';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n    },\n    appBar: {\n      zIndex: theme.zIndex.drawer + 1,\n    },\n    drawer: {\n      //width: 300,\n      flexShrink: 0,\n    },\n    title: {\n      flexGrow: 1,\n    },\n    toolbarMargin: theme.mixins.toolbar,\n  })\n);\n\nfunction App() {\n\n  const classes = useStyles();\n\n  const [open, setOpen] = useState(false);\n  const [tile, setTile] = useState(0);\n  const [tileMap, setTileMap] = useState(new Array(30*20).fill(0));\n\n  function paint(index: number): void {\n    const newMap = tileMap.map((oldT, i) => i !== index ? oldT : tile);\n    setTileMap(newMap);\n  }\n\n  function palette(): any {\n    return mapping.map((coordinate, index) => <div key={index} onClick={() => setTile(index)}><Tile image={image} posX={coordinate.x} posY={coordinate.y} /></div>);\n  }\n\n  function parseTileMap(): any {\n    return tileMap.map((t, i) => {\n      return (\n        <div \n          key={i} \n          onClick={() => paint(i)}\n          onMouseDown={() => paint(i)}\n          onMouseEnter={(event) =>  { \n            event.nativeEvent.which === 1 && paint(i);\n          }} \n        >\n          <Tile image={image} posX={mapping[t]['x']} posY={mapping[t]['y']} />\n        </div>\n      )\n    });\n  }\n\n  return (\n    <div className={classes.root}>\n      <AppBar position='absolute' className={classes.appBar}>\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            Grid Editor\n          </Typography>\n          <div onClick={() => setOpen(true)}>\n            <Grid columns={1} rows={1} tileHeight={16} tileWidth={16} scale={3} >\n              <Tile image={image} posX={mapping[tile]['x']} posY={mapping[tile]['y']} />\n            </Grid>\n          </div>\n        </Toolbar>\n      </AppBar>\n\n      <div>\n        <div className={classes.toolbarMargin} />\n        <TileMap width={30} height={20}>\n          {parseTileMap()}\n        </TileMap>\n\n        <Palette setOpen={setOpen} open={open}>\n          {palette()}\n        </Palette>\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n\nexport interface Coordinate {\n  x: number,\n  y: number,\n  height: number,\n  width: number\n}","import * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}